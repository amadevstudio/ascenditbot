version: "3.9"
services:
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
      # target: dev
    restart: on-failure
    volumes:
      - ./bot:/usr/src/bot
    networks:
      - data-db-network
      - storage-network
    ports:
      - "3000:3000"
    env_file:
      - env/.env
      - env/.env.dev
      - env/.env.prod
      - env/.env.local
    depends_on:
      - storage
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15.1-alpine
    command: postgres -c listen_addresses='*'
    restart: on-failure
    volumes:
      - ./database/postgresql/data:/var/lib/postgresql/data
    networks:
      - data-db-network
    ports:
      - "6432:5432"
    env_file:
      - env/.env
      - env/.env.dev
      - env/.env.prod
      - env/.env.local
    environment:
      ALLOW_IP_RANGE: 0.0.0.0/0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrator:
    build:
      context: ./migrator
      dockerfile: Dockerfile
      target: base
    volumes:
      - ./migrator:/usr/src/migrator
    networks:
      - data-db-network
    env_file:
      - env/.env
      - env/.env.dev
      - env/.env.prod
      - env/.env.local
    depends_on:
      db:
        condition: service_healthy

  storage:
    build:
      context: ./redis
      dockerfile: Dockerfile
      target: base
    restart: on-failure
    volumes:
      - ./redis/redis-data:/var/lib/redis
#      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - storage-network
    environment:
      - REDIS_REPLICATION_MODE=master
    env_file:
      - env/.env
      - env/.env.dev
      - env/.env.prod
      - env/.env.local

networks:
  data-db-network:
    driver: bridge
  storage-network:
    driver: bridge
